// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Configurations;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(PropertyDbContext))]
    partial class PropertyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("Domain.Entities.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CleaningServiceAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FloorNumberOfUnit")
                        .HasColumnType("integer");

                    b.Property<bool>("LaundryFacilityAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfFloorsInBuilding")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResidentialPropertyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("StudentFriendly")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialPropertyId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("Domain.Entities.CommercialProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("ParkingSpace")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalFloors")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("CommercialProperties");
                });

            modelBuilder.Entity("Domain.Entities.EventSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AudioVisualEquipmentsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("CateringServiceAvailable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CommercialPropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaximumCapacity")
                        .HasColumnType("integer");

                    b.Property<int[]>("SuitableEvents")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommercialPropertyId");

                    b.ToTable("EventSpaces");
                });

            modelBuilder.Entity("Domain.Entities.GuestHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ResidentialPropertyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RestaurantOnSite")
                        .HasColumnType("boolean");

                    b.Property<int>("StarRating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialPropertyId");

                    b.ToTable("GuestHouses");
                });

            modelBuilder.Entity("Domain.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ResidentialPropertyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RestaurantOnSite")
                        .HasColumnType("boolean");

                    b.Property<int>("StarRating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialPropertyId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Domain.Entities.House", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("GarageSpace")
                        .HasColumnType("double precision");

                    b.Property<int>("NumberOfStories")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResidentialPropertyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("StudentFriendly")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialPropertyId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Domain.Entities.OfficeSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommercialPropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("MeetingRoomsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("OfficeSpaceType")
                        .HasColumnType("integer");

                    b.Property<bool>("ReceptionAreaAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommercialPropertyId");

                    b.ToTable("OfficeSpaces");
                });

            modelBuilder.Entity("Domain.Entities.PaymentInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Cost")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<bool>("Negotiable")
                        .HasColumnType("boolean");

                    b.Property<int>("PaymentFrequency")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PaymentInformations");
                });

            modelBuilder.Entity("Domain.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AvailableEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AvailableStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ListerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ListingType")
                        .HasColumnType("integer");

                    b.Property<int>("MarketStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("PaymentInformationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PropertyLocationId")
                        .HasColumnType("uuid");

                    b.Property<double?>("PropertySize")
                        .HasColumnType("double precision");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer");

                    b.Property<int>("PublishStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ListerId");

                    b.HasIndex("PaymentInformationId");

                    b.HasIndex("PropertyLocationId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.Entities.PropertyAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyAmenities");
                });

            modelBuilder.Entity("Domain.Entities.PropertyLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PropertyLocations");
                });

            modelBuilder.Entity("Domain.Entities.PropertyPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyPhotos");
                });

            modelBuilder.Entity("Domain.Entities.PropertyVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyVideos");
                });

            modelBuilder.Entity("Domain.Entities.ResidentialProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FurnishedStatus")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfBedrooms")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfKitchens")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfWashrooms")
                        .HasColumnType("integer");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("ResidentialProperties");
                });

            modelBuilder.Entity("Domain.Entities.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommercialPropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DisplayWindowAvailable")
                        .HasColumnType("boolean");

                    b.Property<double>("StorageRoomSize")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommercialPropertyId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Domain.Entities.StudentHostel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CleaningServiceAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HostelLocation")
                        .HasColumnType("integer");

                    b.Property<int>("HostelType")
                        .HasColumnType("integer");

                    b.Property<bool>("LaundryFacilityAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("MealPlanAvailable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ResidentialPropertyId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("RoomTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<bool>("SharedFacilities")
                        .HasColumnType("boolean");

                    b.Property<bool>("StudyAreaAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialPropertyId");

                    b.ToTable("StudentHostels");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CeilingHeight")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CommercialPropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LoadingDockAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("OfficeSpaceAvailable")
                        .HasColumnType("boolean");

                    b.Property<int[]>("SuitableGoods")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommercialPropertyId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Domain.Entities.Apartment", b =>
                {
                    b.HasOne("Domain.Entities.ResidentialProperty", "ResidentialProperty")
                        .WithMany()
                        .HasForeignKey("ResidentialPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidentialProperty");
                });

            modelBuilder.Entity("Domain.Entities.CommercialProperty", b =>
                {
                    b.HasOne("Domain.Entities.Property", "Property")
                        .WithOne("CommercialProperty")
                        .HasForeignKey("Domain.Entities.CommercialProperty", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Domain.Entities.EventSpace", b =>
                {
                    b.HasOne("Domain.Entities.CommercialProperty", "CommercialProperty")
                        .WithMany()
                        .HasForeignKey("CommercialPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommercialProperty");
                });

            modelBuilder.Entity("Domain.Entities.GuestHouse", b =>
                {
                    b.HasOne("Domain.Entities.ResidentialProperty", "ResidentialProperty")
                        .WithMany()
                        .HasForeignKey("ResidentialPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidentialProperty");
                });

            modelBuilder.Entity("Domain.Entities.Hotel", b =>
                {
                    b.HasOne("Domain.Entities.ResidentialProperty", "ResidentialProperty")
                        .WithMany()
                        .HasForeignKey("ResidentialPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidentialProperty");
                });

            modelBuilder.Entity("Domain.Entities.House", b =>
                {
                    b.HasOne("Domain.Entities.ResidentialProperty", "ResidentialProperty")
                        .WithMany()
                        .HasForeignKey("ResidentialPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidentialProperty");
                });

            modelBuilder.Entity("Domain.Entities.OfficeSpace", b =>
                {
                    b.HasOne("Domain.Entities.CommercialProperty", "CommercialProperty")
                        .WithMany()
                        .HasForeignKey("CommercialPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommercialProperty");
                });

            modelBuilder.Entity("Domain.Entities.Property", b =>
                {
                    b.HasOne("Domain.Entities.User", "Lister")
                        .WithMany()
                        .HasForeignKey("ListerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PaymentInformation", "PaymentInformation")
                        .WithMany()
                        .HasForeignKey("PaymentInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PropertyLocation", "PropertyLocation")
                        .WithMany()
                        .HasForeignKey("PropertyLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lister");

                    b.Navigation("PaymentInformation");

                    b.Navigation("PropertyLocation");
                });

            modelBuilder.Entity("Domain.Entities.PropertyAmenity", b =>
                {
                    b.HasOne("Domain.Entities.Amenity", "Amenity")
                        .WithMany()
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Domain.Entities.PropertyPhoto", b =>
                {
                    b.HasOne("Domain.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Domain.Entities.PropertyVideo", b =>
                {
                    b.HasOne("Domain.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Domain.Entities.ResidentialProperty", b =>
                {
                    b.HasOne("Domain.Entities.Property", "Property")
                        .WithOne("ResidentialProperty")
                        .HasForeignKey("Domain.Entities.ResidentialProperty", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Domain.Entities.Shop", b =>
                {
                    b.HasOne("Domain.Entities.CommercialProperty", "CommercialProperty")
                        .WithMany()
                        .HasForeignKey("CommercialPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommercialProperty");
                });

            modelBuilder.Entity("Domain.Entities.StudentHostel", b =>
                {
                    b.HasOne("Domain.Entities.ResidentialProperty", "ResidentialProperty")
                        .WithMany()
                        .HasForeignKey("ResidentialPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidentialProperty");
                });

            modelBuilder.Entity("Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("Domain.Entities.CommercialProperty", "CommercialProperty")
                        .WithMany()
                        .HasForeignKey("CommercialPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommercialProperty");
                });

            modelBuilder.Entity("Domain.Entities.Property", b =>
                {
                    b.Navigation("CommercialProperty")
                        .IsRequired();

                    b.Navigation("ResidentialProperty")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
